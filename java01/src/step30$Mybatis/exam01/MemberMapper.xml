<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- SQL 문을 모아둔 태그
     => namespace : SQL을 찾을 때 사용할 패키지명이다.
     => 가능한 찾고 이해하기 쉽도록 Dao 클래스 이름과 같게하라.
 -->
<mapper namespace="MemberDao">

  <!-- SQL문을 선언하는 태그
       => mybatis는 이 태그에 선언된 SQL문을 실행할 것이다.
       => id : SQL문을 찾을 때 사용할 식별자다.
       => resultType: SELETE 결과를 담을 때 사용할 값 객체의 이름이다.
       => select문은 select 태그에 선언하라!
       => insert, updatem delete문에 대해서도 같은 이름의 태그가 있으니, 
          그 태그를 사용하여 SQL문을 선언하라.
       => insert 태그에 update SQL문을 넣더라도 오류는 아니다.
          하.지.만 가능한 그 SQL문을 위해 준비한 태그를 사용하라!
   -->
   
   <!-- select 결과를 VO 객체에 담을 때 규칙
   1) 컬럼 이름과 일치하는 프로퍼티를 찾는다.
   2) 만약 일치하는 프로퍼티가 없다면 컬럼 값을 넣지 않는다.
    
   프로퍼티(property)?
   => getter/setter 메서드이다.
   => 필드(인스턴스 변수)가 아니다.
   => 예)
   class Member {
    String fName;
    
    public void setFirstName(String name) {...}
    public String getFirstname() {...}
   }
   위의 클래스가 있다고 가정하면,
   => 필드명: fName
   => 프로퍼티명 : firstName, firstname 두 개가 존재한다. 대/소문자를 구분한다.
   
   프로퍼티 이름?
   => setter/getter 메서드 이름에서 get/set을 제거한다.
   => 그리고 나머지 이름에서 첫 알파벳은 소문자로 만든다.
   => setFirstName() -> firstName (쓰기용 프로퍼티)
   => getFirstname() -> firstname (읽기용 프로퍼티)
   -->
   
   <!-- step30.exam01.Member 클래스의 프로퍼티는??
   => no, name, email, password, tel
   -->
   
   <!-- MEMBERS 테이블에 컬럼은?
   => MNO, MNAME, EMAIL, PWD, TEL
   => 테이블의 컬럼이름과 VO 객체의 프로퍼티 이름을 비교할 때는
      대소문자를 구분하지 않는다.
   -->
   
   <!-- 컬럼 이름과 VO 객체의 프로퍼티 이름이 다를 경우?
   => 컬럼의 프로퍼티 이름과 같은 별명을 부여하라! 
   -->
  <select id="selectList" resultType="step30.exam01.Member">
    select
      MNO as no,
      MNAME as name,
      EMAIL,
      PWD as password,
      TEL
    from MEMBERS
  </select>
</mapper>